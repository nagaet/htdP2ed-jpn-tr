


エピローグ ムービングオン

    コンピューティング

    プログラムデザイン

    オンワード、デベロッパーとコンピュータサイエンティスト

    オンワード、会計士、ジャーナリスト、外科医、その他の人々

コンピュータとプログラミング、あるいはプログラムデザインについてのこの入門書はこれで終わりです。両者について学ぶべきことはまだまだありますが、ここで一旦立ち止まり、まとめ、先を見据えるのがよいでしょう。


=====
コンピューティング

小学校では、数字を使って計算することを学びました。最初は、リンゴ3個、友達5人、ベーグル12個など、実物を数えるために数字を使っていました。その後、足し算、引き算、掛け算、割り算、そして分数。やがて、変数や関数を知るようになり、先生たちはこれを代数学と呼んだ。変数は数を表し、関数は数と数を関連付ける。

このように数字を使っていたため、現実世界の情報を表現する手段として数字をあまり意識していなかったのですね。確かに、3頭の熊、5頭の狼、12頭の馬からスタートしたわけですが、高校生の頃には、この関係を思い出す人はいませんでしたね。

数学的な計算からコンピューティングに移行すると、情報からデータへ、そしてその逆へとステップを踏むことが中心となる。現在では、音楽、ビデオ、分子、化学物質、ビジネスケース、電気回路図、設計図などの表現がプログラムで処理されています。幸いなことに、これらの情報をすべて数字で、悪く言えば0と1だけで符号化する必要はありません。その代わりに、コンピューティングは算術と代数を一般化し、プログラミングの際に、文字列、ブール値、文字、構造体、リスト、関数、その他多くの種類のデータでコーディングし、プログラムが計算できるようにします。

データのクラスとその関数には、数値とその関数に対する法則と同じように、その意味を説明する等式法則があります。この等式法則は、g(+ 1 1)は2、g(not #true)は#falseと評価されるような簡単なものですが、プログラム全体の動作を予測するために使うことができます。プログラムを実行するとき、実際にはその多くの関数のうちの1つを適用するだけです。この行為は、Intermezzo 1: Beginning Student Languageで初めて言及されたベータルールで説明することができます。変数が値に置き換わると、データの法則にしたがって、値か別の関数が適用されるだけとなります。しかし、そう、これがコンピュータのすべてなのだ。


=====
プログラム設計

一般的なソフトウェア開発プロジェクトでは、多くのプログラマーが協力し、何千もの機能で構成される。そのようなプロジェクトの寿命の間に、プログラマーは入れ替わります。したがって、プログラムの設計構造は、まさに時間を越えたプログラマー間のコミュニケーション手段である。なぜなら、その人はもうこの世にいないかもしれないからです。

このようなダイナミックな状況において、プログラマが適正な労働時間を確保し、高品質な製品を生み出すためには、規律正しい方法でプログラムを作成する必要があります。体系的な設計手法に従うことで、プログラムの構成が理解しやすくなることが保証される。そうすれば、プログラマーはプログラムの断片や全体を容易に理解し、バグを修正したり、新しい機能を追加したりすることができます。

本書の設計プロセスはその一つであり、あなたが気になるプログラムを作るときには、必ずこの手法に従ってください。まず、情報の世界を分析し、その情報を表現するデータを記述します。そして、必要な機能の作業リストを作成する。このリストが大きい場合は、反復してプロセスを洗練させます。まずは、クライアントと対話できる製品がすぐに作れるような機能のサブセットから始めます。このようなやりとりを見ていると、次に取り組むべき作業リストの要素がすぐに分かってきます。

プログラム、あるいは関数だけを設計する場合、それが何を計算するのかについて厳密に理解する必要があります。コードの一部を簡潔な文章で説明できなければ、将来のプログラマにとって有益なものは作れません。例題を作り、それを実行する。これらの例をテスト群にする。このテスト群は、将来プログラムを修正するときにさらに重要になります。コードを変更した人は、これらのテストを再実行し、プログラムが基本的な例に対してまだ動作することを再確認することができます。

最終的にはあなたのプログラムも失敗します。他のプログラマが予期せぬ使い方をするかもしれない。実際のユーザが、期待された動作と実際の動作に違いを見つけるかもしれません。あなたはコードを体系的に設計しているので、何をすべきかは分かっています。プログラムの主関数に対して、失敗するテストケースを作成します。この1つのテストから、main関数が言及している各関数のテストケースを導き出します。新しいテストに合格した関数は、失敗の原因にはなりません。時には、いくつかの関数が共謀してバグを作り出すかもしれません。もし壊れた関数が他の関数と結合しているのなら、テストの作成を再開してください。問題が解決したのは、プログラム全体がすべてのテストにパスしたときです。

どんなに頑張っても、関数やプログラムはテストスイートを通過した時点で終わりではありません。設計上の欠陥や設計の繰り返しがないか、時間を見つけて検査する必要があります。もし、デザインパターンが見つかったら、新しい抽象化を行うか、既存の抽象化を使って、そのパターンを排除する必要があります。

これらのガイドラインを尊重すれば、合理的な努力で確かなソフトウエアを作成することができます。なぜ、どのように動作するのかを理解しているからこそ、ソフトウェアが動作するのです。あなたのソフトウェアを修正したり拡張したりしなければならない他の人たちも、コードがそのプロセスと目的を伝えているので、すぐに理解することができます。この本を読んで、あなたはスタートしました。これからは、実践、実践、実践です。そして、プログラム設計とコンピュータについて、最初の本では教えきれないほど多くのことを学ばなければならないのです。


=====
開発者とコンピュータ科学者よ、前進せよ

今、あなたは次に何を勉強すればいいのか悩んでいるかもしれません。その答えは、プログラミングとコンピュータの両方を学ぶことです。

プログラム設計を学ぶ者として、次の課題は、本格的なプログラミング言語の設定において、設計プロセスがどのように適用されるかを学ぶことです。中には、今回の教育用言語と同じように、簡単に移行できる言語もあります。また、データの定義（クラスやオブジェクト）を記述したり、シグネチャを記述してプログラムを実行する前に照合する（型）ために、別の考え方が必要な言語もあります。(入門の一つの可能性として、"Realm of Racket" (http://realmofracket.com/about.html) を参照してください) さらに、いわゆるフレームワーク（gstacksh）やコンポーネントの使用や製作に至るまで、設計プロセスをどのように拡張していくかを学ぶ必要があります。大まかに言えば、フレームワークは、多くのソフトウェアシステムに共通する機能の断片（たとえば、グラフィカルユーザーインターフェイス、データベース接続、Web接続など）を抽象化したものです。このような抽象化された機能をインスタンス化することを学ぶ必要があり、プログラムはこれらのインスタンスを組み合わせて首尾一貫したシステムを作成することになります。同様に、新しいシステムコンポーネントを作成することも、本質的にスキルのスケールアップの一部です。

また、コンピューティングを学ぶ者として、計算のプロセスに対する理解を深める必要があります。本書では、プロセスそのものを記述する法則に焦点をあててきました。実際のソフトウェアエンジニアとして機能するためには、理論的なレベルと実践的なレベルの両方で、プロセスにどのような費用がかかるかを学ぶ必要があります。プログラムの性能を測定し分析することは、開発者として日常的に必要とされるスキルなので、本当の目標です。また、これらの基本的な考え方だけでなく、ハードウェア、ネットワーク、ソフトウェアの階層化、様々な分野の専門的なアルゴリズムに関する知識も必要になってきます。


=====
会計士、ジャーナリスト、外科医、その他すべての人たちへ

コンピューティングやプログラミングがどういうものなのか、見てみたいという方もいらっしゃったでしょう。コンピューティングが単に計算の一般化であることを知り、プログラム設計がいかに自分にとって有用であるかを感じられたことでしょう。たとえ二度とプログラムを開発することがなくても、ガレージプログラマと本格的なソフトウェア開発者の違いは何なのかを知っているはずです。プロフェッショナルとして開発者と接するとき、システム設計はあなたの生活の質やビジネスの収益に影響を与えるので、重要であることを知ることができます。

しかし、実際には、「プログラマ」はまた定期的に行っているはずで、自分の活動をそのように捉えていないだけかもしれません。例えば、あるジャーナリストを想像してみてください。彼のストーリーは、情報やデータの収集から始まり、それを並べ、整理し、逸話を加える。目を凝らせば、それはデザインプロセスの第一段階に過ぎないことがわかるでしょう。例えば、かかりつけのお医者さんが、あなたの症状を調べて、何が原因なのか仮説を立てます。ステップ2が見えてきましたか？また、弁護士が多くの例を挙げて論旨を説明するのは、第三段階と言えるでしょう。最後に、土木技師は、橋が設計図とその下にある静的な計算通りにできているか、橋を建設しながらクロスチェックを行います。クロスチェックはテストの一種であり、プロセスのステップ6で、実測値と予測計算による期待値を比較する。これらの専門家はそれぞれ、効果的かつ効率的に仕事を進めるためのシステムを構築していますが、そのシステムの奥底には、本書で採用されている設計プロセスのようなものがあると思われます。

さて、多くの活動がプログラミングの一種であることを受け止めれば、デザインプロセスから得られるアイデアを自分の生活に取り入れることができるようになります。例えば、パターンを認識したなら、将来の仕事を単純化するために、わずかな時間を使って「抽象化」（single point of control）を作成することができます。ですから、あなたが会計士になるか、医者になるかにかかわらず、どこに行っても、何をするにしても、デザインプロセスを思い出してください。

Exercise あなたが選んだ職業に、デザインプロセスがどのように役立つかについて、短いエッセイを書いてください。

